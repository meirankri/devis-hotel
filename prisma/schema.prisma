generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String    @id @default(uuid())
  email                String    @unique
  isEmailVerified      Boolean   @default(false)
  profilePictureUrl    String?
  stripeCustomerId     String?   @unique
  priceId              String?
  name                 String?
  nextQuotaRenewalDate DateTime?
  subscriptionDate     DateTime?
  organizationId       String?

  subscription  Subscription?  @relation(fields: [subscriptionId], references: [id])
  organization  Organization?  @relation(fields: [organizationId], references: [id])
  oauthAccounts OauthAccount[]
  magicLinks    MagicLink[]
  sessions      Session[]

  ProductUsage   ProductUsage[]
  subscriptionId String?
}

model Product {
  id             String         @id @default(uuid())
  name           String
  quota          Int
  subscriptionId String
  subscription   Subscription   @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  ProductUsage   ProductUsage[]

  @@unique([name, subscriptionId])
}

model ProductUsage {
  id        String  @id @default(uuid())
  userId    String
  user      User    @relation(fields: [userId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  remaining Int

  @@unique([userId, productId])
}

enum Timeline {
  MONTHLY
  YEARLY
  ONETIME
}

model Subscription {
  id            String    @id @default(uuid())
  planTitle     String
  price         Decimal
  timeline      Timeline? @default(MONTHLY)
  description   String
  stripePriceId String?
  stripeLink    String?
  features      Feature[]
  products      Product[]
  User          User[]

  @@unique([planTitle, timeline])
}

model Feature {
  id             String       @id @default(uuid())
  label          String
  subscriptionId String
  subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@unique([label, subscriptionId])
}

model OauthAccount {
  id             String   @id @default(uuid())
  userId         String
  provider       String
  providerUserId String
  accessToken    String
  refreshToken   String?
  expiresAt      DateTime
  user           User     @relation(fields: [userId], references: [id])
}

model MagicLink {
  id     Int    @id @default(autoincrement())
  userId String
  token  String
  user   User   @relation(fields: [userId], references: [id])

  @@unique([userId, token])
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  expiresAt DateTime
  expiresIn Int

  user User @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Document {
  id          String   @id @default(uuid())
  fileName    String
  fileUrl     String
  fileSize    Int
  mimeType    String
  entityId    String   // ID de l'entité associée
  entityType  String   // Type de l'entité (ex: "User", "Product", etc.)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String   // ID de l'utilisateur qui a créé le document

  @@index([entityId, entityType])
  @@index([createdBy])
}

// Modèles pour la gestion des séjours

model Organization {
  id          String   @id @default(uuid())
  name        String
  slug        String   @unique
  description String?
  logoUrl     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  users       User[]
  hotels      Hotel[]
  ageRanges   AgeRange[]
  stays       Stay[]
}

model Hotel {
  id             String   @id @default(uuid())
  name           String
  description    String?
  address        String?
  imageUrl       String?
  organizationId String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  organization   Organization @relation(fields: [organizationId], references: [id])
  rooms          Room[]
  stays          Stay[]
}

model Room {
  id            String   @id @default(uuid())
  hotelId       String
  name          String
  description   String?
  capacity      Int
  imageUrl      String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  hotel         Hotel    @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  roomPricings  RoomPricing[]
  quoteRooms    QuoteRoom[]
}

model AgeRange {
  id             String   @id @default(uuid())
  name           String   // Ex: "Adulte", "Enfant 3-12 ans", "Bébé"
  minAge         Int?
  maxAge         Int?
  order          Int      @default(0) // Pour l'ordre d'affichage
  organizationId String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  organization       Organization @relation(fields: [organizationId], references: [id])
  roomPricings       RoomPricing[]
  quoteParticipants  QuoteParticipant[]
  quoteRoomOccupants QuoteRoomOccupant[]
}

model RoomPricing {
  id          String   @id @default(uuid())
  roomId      String
  ageRangeId  String
  price       Decimal  // Prix par personne
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  room        Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  ageRange    AgeRange @relation(fields: [ageRangeId], references: [id], onDelete: Cascade)
  
  @@unique([roomId, ageRangeId])
}

model Stay {
  id                    String   @id @default(uuid())
  name                  String   // Ex: "Pessah 2024", "Été 2024"
  slug                  String   // Pour l'URL publique
  description           String?
  startDate             DateTime
  endDate               DateTime
  hotelId               String
  organizationId        String?
  allowPartialBooking   Boolean  @default(false) // Permet réservation partielle
  minDays               Int?     // Nombre minimum de jours si partielle
  maxDays               Int?     // Nombre maximum de jours
  isActive              Boolean  @default(true)
  imageUrl              String?  // Conservé pour rétrocompatibilité
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  hotel                 Hotel         @relation(fields: [hotelId], references: [id])
  organization          Organization?  @relation(fields: [organizationId], references: [id])
  quotes                Quote[]
  images                StayImage[]
  
  @@unique([organizationId, slug])
}

model StayImage {
  id        String   @id @default(uuid())
  stayId    String
  url       String
  order     Int      @default(0)
  isMain    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  stay      Stay     @relation(fields: [stayId], references: [id], onDelete: Cascade)
  
  @@index([stayId])
}

model Quote {
  id                String       @id @default(uuid())
  quoteNumber       String       @unique
  stayId            String
  firstName         String
  lastName          String
  email             String
  phone             String
  checkIn           DateTime
  checkOut          DateTime
  specialRequests   String?
  status            QuoteStatus  @default(PENDING)
  totalPrice        Decimal?     // Calculé après validation par l'admin
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  
  stay              Stay         @relation(fields: [stayId], references: [id])
  quoteParticipants QuoteParticipant[]
  quoteRooms        QuoteRoom[]
}

model QuoteParticipant {
  id          String   @id @default(uuid())
  quoteId     String
  ageRangeId  String
  count       Int      // Nombre de personnes pour cette tranche d'âge
  
  quote       Quote    @relation(fields: [quoteId], references: [id], onDelete: Cascade)
  ageRange    AgeRange @relation(fields: [ageRangeId], references: [id])
  
  @@unique([quoteId, ageRangeId])
}

model QuoteRoom {
  id          String   @id @default(uuid())
  quoteId     String
  roomId      String
  quantity    Int      @default(1) // Nombre de chambres de ce type
  
  quote       Quote    @relation(fields: [quoteId], references: [id], onDelete: Cascade)
  room        Room     @relation(fields: [roomId], references: [id])
  quoteRoomOccupants QuoteRoomOccupant[]
  
}

model QuoteRoomOccupant {
  id          String   @id @default(uuid())
  quoteRoomId String
  ageRangeId  String
  count       Int      // Nombre de personnes de cette tranche d'âge dans cette chambre
  
  quoteRoom   QuoteRoom @relation(fields: [quoteRoomId], references: [id], onDelete: Cascade)
  ageRange    AgeRange  @relation(fields: [ageRangeId], references: [id])
  
  @@unique([quoteRoomId, ageRangeId])
}

enum QuoteStatus {
  PENDING
  ACCEPTED
  REJECTED
  EXPIRED
}
